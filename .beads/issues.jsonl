{"id":"ctl-1","title":"Route all library operations through store","description":"Refactor library access so all calls, reads, writes, etc go through the store. Hide library implementation from the rest of the app and simplify the interface to prepare for extracting complexity into a dependency.","design":"1. Audit all direct library/Tauri command calls in components\n2. Create/expand store methods to encapsulate library operations\n3. Update components to use store instead of direct library calls\n4. Define minimal interface that store should expose\n5. Move library complexity behind clean API boundary","acceptance_criteria":"- No components directly call Tauri library commands\n- All library operations go through store\n- Store exposes simple, clean interface\n- Library implementation details hidden from app code","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T12:18:28.207745-07:00","updated_at":"2025-10-20T12:53:45.324511-07:00","closed_at":"2025-10-20T12:22:43.973248-07:00"}
{"id":"ctl-2","title":"Remove `pickLibrary` from the store -- it has nothing to do with the store!","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T13:05:45.088484-07:00","updated_at":"2025-10-20T13:12:45.967033-07:00","closed_at":"2025-10-20T13:12:45.967033-07:00"}
{"id":"ctl-3","title":"Remove `createLibrary` from store. It's library related, but not store related.","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T13:06:16.891291-07:00","updated_at":"2025-10-20T13:06:16.891291-07:00"}
{"id":"ctl-4","title":"Double-check that returning a bulk object of actions is common Zustand pattern","description":"Feels wrong!","notes":"## Research Summary\n\nBased on research from multiple Zustand best practices articles:\n\n### Current Pattern (Anti-pattern)\n- We have `createLibraryActions()` that returns an object of actions\n- These actions are in a separate file `actions.ts`\n- Components use `useLibraryActions()` hook to get the actions\n\n### Recommended Zustand Pattern\nAccording to TkDodo's blog and official Zustand best practices:\n1. **Actions should live INSIDE the store**, not in a separate file\n2. Group them under an `actions` object in the store state\n3. Export a dedicated selector/hook like `useLibraryActions = () =\u003e useLibraryStore(state =\u003e state.actions)`\n4. Benefits: Actions are static and don't cause re-renders, keeps business logic with state\n\n### Recommendation\nMove all actions from `actions.ts` INTO `store.ts` as methods on the store state. This is the idiomatic Zustand pattern.\n\nExample:\n```ts\nexport const useLibraryStore = create((set, get) =\u003e ({\n  // state\n  books: [],\n  // actions\n  updateBook: async (id, updates) =\u003e {\n    const library = get().library;\n    await library.updateBook(id, updates);\n    await get().loadBooks();\n  },\n  // ... other actions\n}))\n\nexport const useLibraryActions = () =\u003e useLibraryStore(state =\u003e ({\n  updateBook: state.updateBook,\n  updateAuthor: state.updateAuthor,\n  // ... etc\n}))\n```","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T13:07:52.774649-07:00","updated_at":"2025-10-20T13:32:02.339886-07:00","closed_at":"2025-10-20T13:32:02.339886-07:00"}
