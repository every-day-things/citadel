
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async initClient(libraryPath: string) : Promise<Result<CalibreClientConfig, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("init_client", { libraryPath }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbQueryIsPathValidLibrary(libraryRoot: string) : Promise<boolean> {
    return await TAURI_INVOKE("clb_query_is_path_valid_library", { libraryRoot });
},
async clbCmdCreateLibrary(libraryRoot: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_create_library", { libraryRoot }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbQueryListAllBooks() : Promise<Result<LibraryBook[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_query_list_all_books") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbQueryIsFileImportable(pathToFile: string) : Promise<ImportableFile | null> {
    return await TAURI_INVOKE("clb_query_is_file_importable", { pathToFile });
},
async clbQueryImportableFileMetadata(file: ImportableFile) : Promise<ImportableBookMetadata | null> {
    return await TAURI_INVOKE("clb_query_importable_file_metadata", { file });
},
/**
 * Lists all importable file types. Those are files that Citadel knows how
 * to import, and that libcalibre supports.
 */
async clbQueryListAllFiletypes() : Promise<([string, string])[]> {
    return await TAURI_INVOKE("clb_query_list_all_filetypes");
},
async clbCmdCreateBook(md: ImportableBookMetadata) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_create_book", { md }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbCmdUpdateBook(bookId: string, updates: BookUpdate) : Promise<Result<number, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_update_book", { bookId, updates }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbCmdUpsertBookIdentifier(bookId: string, label: string, value: string, existingId: number | null) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_upsert_book_identifier", { bookId, label, value, existingId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbCmdDeleteBookIdentifier(bookId: string, identifierId: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_delete_book_identifier", { bookId, identifierId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbQueryListAllAuthors() : Promise<Result<LibraryAuthor[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_query_list_all_authors") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbCmdCreateAuthors(newAuthors: NewAuthor[]) : Promise<Result<LibraryAuthor[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_create_authors", { newAuthors }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbCmdUpdateAuthor(authorId: string, updates: AuthorUpdate) : Promise<Result<number, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_update_author", { authorId, updates }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async clbCmdDeleteAuthor(authorId: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clb_cmd_delete_author", { authorId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type AuthorUpdate = { full_name: string | null; sortable_name: string | null; external_url: string | null }
export type BookFile = { Local: LocalFile } | { Remote: RemoteFile }
export type BookUpdate = { author_id_list: string[] | null; title: string | null; timestamp: string | null; publication_date: string | null; is_read: boolean | null; description: string | null }
export type CalibreClientConfig = { library_path: string }
/**
 * Book identifiers, such as ISBN, DOI, Google Books ID, etc.
 */
export type Identifier = { id: number; label: string; value: string }
/**
 * Represents metadata for pre-import books, which have a very loose structure.
 */
export type ImportableBookMetadata = { file_type: ImportableBookType; 
/**
 * The title of the book, if one is available, or the name of the file to import.
 */
title: string; 
/**
 * The list of authors of the book, if available. Some books may not be formatted correctly,
 * and will have no authors, or all author names will be one string separated by "," or ";".
 */
author_names: string[] | null; identifier: string | null; publisher: string | null; language: string | null; tags: string[]; 
/**
 * Path of the file to import.
 */
path: string; publication_date: string | null; 
/**
 * True if a cover image can be extracted from the file at `path`.
 */
file_contains_cover: boolean }
export type ImportableBookType = "Epub" | "Pdf" | "Mobi" | "Text"
export type ImportableFile = { path: string }
export type LibraryAuthor = { id: string; name: string; sortable_name: string }
export type LibraryBook = { id: string; uuid: string | null; title: string; author_list: LibraryAuthor[]; sortable_title: string | null; file_list: BookFile[]; cover_image: LocalOrRemoteUrl | null; identifier_list: Identifier[]; description: string | null; is_read: boolean }
export type LocalFile = { 
/**
 * The absolute path to the file, including extension.
 */
path: string; 
/**
 * The MIME type of the file. Common values are `application/pdf` and `application/epub+zip`.
 */
mime_type: string }
export type LocalOrRemote = "Local" | "Remote"
export type LocalOrRemoteUrl = { kind: LocalOrRemote; url: string; local_path: string | null }
export type NewAuthor = { name: string; sortable_name: string | null }
export type RemoteFile = { url: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
